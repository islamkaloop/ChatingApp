import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.management.modelmbean.RequiredModelMBean;

public class Server 
{
	static ArrayList<String> members = new ArrayList<>();
	static ArrayList<Socket> sockets = new ArrayList<>();
	public static void main(String[] args) throws IOException 
	{
		System.out.println("The server is running.");
        ExecutorService pool = Executors.newFixedThreadPool(20);
        try (ServerSocket listener = new ServerSocket(9898))
        {
            while (true) 
            {
            	Socket socket = listener.accept();
            	if(joinResponse(socket)) {
                    pool.execute(new serverThreads(socket));
            	}
            	else {
                    PrintWriter outToClient = new PrintWriter(socket.getOutputStream(), true);
	                outToClient.println("Name used");
            	}
            }
        }
	}
	
	private static boolean joinResponse (Socket socket) throws IOException {
		BufferedReader inFromClient = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter outToClient = new PrintWriter(socket.getOutputStream(), true);
    	String id = inFromClient.readLine();
    	if(members.contains(id)) {
    		outToClient.println("false");
    		return false;
    	}
    	else {
    		outToClient.println("true");
    		sockets.add(socket);
    		members.add(id);
    		return true;
    	}
	}
	
	public static void memeberListResponse(Socket socket) throws IOException {
		String s="";
        PrintWriter outToClient = new PrintWriter(socket.getOutputStream(), true);
        for(int i=0;i<members.size();i++) {
        	s+=members.get(i)+",";
        }
        outToClient.println(s);
	}
	
	private static void Route(String Message,String Destination) throws IOException {
		Socket sock =sockets.get(members.indexOf(Destination));
		PrintWriter outToClient = new PrintWriter(sock.getOutputStream(), true);
		outToClient.println(Message);
	}
	
	private static class serverThreads implements Runnable 
	{
        private Socket socket;
        private int clientNumber;
        

        public serverThreads(Socket socket) 
        {
            this.socket = socket;
            System.out.println("New client #" + clientNumber + " connected at " + socket);
        }

        public void run() 
        {
            try 
            {
                BufferedReader inFromClient = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter outToClient = new PrintWriter(socket.getOutputStream(), true);
            	while(true) 
            	{
	                String sentence = inFromClient.readLine();
	                if (sentence.equals("#")) 
	                {
	                	memeberListResponse(this.socket);
	    			}
	                else if (sentence.equals("*")) 
	                {
	                	sockets.remove(socket);
	                	this.socket.close();
	    			}
	                else {
	                	String source =inFromClient.readLine();
	                	String destination =inFromClient.readLine();
	                	if(members.contains(destination)){
	                		outToClient.println("true");
	                		String message="";
	                		while(true){
	                			source=inFromClient.readLine();
	                			destination =inFromClient.readLine();
	                			message=inFromClient.readLine();
	                			if(message.equals("leave")){
	                				break;
	                			}else{
	                				Route(message,destination);
	                			}
	                		}
	                	}else{
	                		outToClient.println("false");
	                	}
	                	
	                }
            	}
            } 
            catch (Exception e) 
            {
                System.out.println("Error handling client #" + clientNumber +"   "+e.getMessage());
            } 
            finally
            {
                try 
                { 
                	socket.close(); 
                } 
                catch (IOException e) {
                	
                }
                System.out.println("Connection with client # " + clientNumber + " closed");
            }
        }
    }
}